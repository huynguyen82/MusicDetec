import pandas as pd
import numpy as np
import pickle
import os
import torch
import re

from librosa.core import load
from librosa.feature import melspectrogram
from librosa import power_to_db
from model import genreNet

from config import RAW_DATAPATH, DATARANK, DATAGEN
from config import MODELPATH_feat
import multiprocessing
#########
def ParseFileToDict(file, deter=' ',assert2fields = False, value_processor = None):
     if value_processor is None:
         value_processor = lambda x: x[0]
     dict = {}
     for line in open(file,'r'):
         parts = line.split(deter)
         if assert2fields:
            assert(len(parts) == 2)
         dict[parts[0]] = value_processor(parts[1:])
     return dict
def compute_feat(key, ranks_data, gen_data):
    # Geting rank data from file
    m_id = key
    rank_line = ranks_data[key].split() # rank level
    if len(rank_line)>0: # corrected data
        m_rank = rank_line[0]
        m_data = None ; # for other data
        if len(rank_line)>1: # including some other features
            m_data=np.asarray(rank_line[1:])
            m_data=np.asfarray(m_data,float)
        mp3_path = 'train/' + m_id + '.mp3'
        if (os.path.isfile(mp3_path)):            
            # Getting genre data for the current file
            gen_line = re.sub('\n','',re.sub(' +',' ',gen_data[key]))
            gen_chunks = gen_line.split('] [') # 
            # Getting Mel-Spec feature
            y, sr = load(mp3_path, mono=True)
            S           = melspectrogram(y, sr).T
            S           = S[:-1 * (S.shape[0] % 128)]
            mp3_length=S.shape[0]
            num_chunk   = int(mp3_length/128)
            if num_chunk > 0:                                                        
                data_chunks = np.split(S, num_chunk)
                if num_chunk > len(gen_chunks): # to make len(gen_data) = len(melspec_data)
                    num_chunk = len(gen_chunks)
                    data_chunks = data_chunks[:num_chunk-1]
                # Combining feats
                feats = []
                for i in range(num_chunk):
                    melspec=data_chunks[i] # Mel-spectrogram feature 128x128
                    genfeat=np.asarray(re.sub('[\[\]]','',gen_chunks[i]).split()) # Genre feat creadted from a pre-trained Net, 1x10
                    genfeat=np.asfarray(genfeat,float)
                    genfeat= np.tile(genfeat,(128,1)) # row duplicating into 128x10
                    if m_data is not None: # Art feature 1x10
                        m_data=np.asarray(m_data,(128,1)) # row duplicating into 128x10
                        feat_t   = np.concatenate((melspec,genfeat,m_data),axis=1) # [melspec,genfeat,m_data] 128x148
                    else:
                        feat_t   = np.concatenate((melspec,genfeat),axis=1) # [melspec,genfeat] 128x138
                    feats.append(feat_t)
                feats = [(data, m_rank) for data in feats]
                torch.save(feats,'data/' + key)        
#########
class Data_rank():

    def __init__(self, ranks, datapath):
        self.raw_data   = None  
        self.RANKS     = ranks      
        self.DATAPATH   = datapath
        print("\n-> Data() object is initialized.")

    def make_raw_data(self):
        # Load ranking data
        ranks_data = ParseFileToDict(DATARANK,deter=' ',value_processor = lambda x: " ".join(x))
        ranks_data_keys = sorted(ranks_data.keys())
        gen_data = ParseFileToDict(DATAGEN,deter=',',value_processor = lambda x: " ".join(x))
        gen_data_keys = sorted(gen_data.keys())
        
        if os.path.isfile('done_keys_saved'):
            done_keys=torch.load('done_keys_saved')
            records=torch.load('records_saved')
        else:
            records = list()        
            done_keys = list()

        total=len(gen_data_keys)    
        step=len(done_keys)
        for key in gen_data_keys:     
            if key not in done_keys:
                step+=1
                print(str(step)+'/'+str(total))
                if key in ranks_data_keys:
                    # Geting rank data from file
                    m_id = key
                    rank_line = ranks_data[key].split() # rank level
                    if len(rank_line)>0: # corrected data
                        m_rank = rank_line[0]
                        m_data = None ; # for other data
                        if len(rank_line)>1: # including some other features
                            m_data=np.asarray(rank_line[1:])
                            m_data=np.asfarray(m_data,float)
                        mp3_path = 'train/' + m_id + '.mp3'
                        if (os.path.isfile(mp3_path)):            
                            # Getting genre data for the current file
                            gen_line = re.sub('\n','',re.sub(' +',' ',gen_data[key]))
                            gen_chunks = gen_line.split('] [') # 
                            # Getting Mel-Spec feature
                            y, sr = load(mp3_path, mono=True)
                            S           = melspectrogram(y, sr).T
                            S           = S[:-1 * (S.shape[0] % 128)]
                            mp3_length=S.shape[0]
                            num_chunk   = int(mp3_length/128)
                            if num_chunk > 0:                                                        
                                data_chunks = np.split(S, num_chunk)
                                if num_chunk > len(gen_chunks): # to make len(gen_data) = len(melspec_data)
                                    num_chunk = len(gen_chunks)
                                    data_chunks = data_chunks[:num_chunk-1]
                                # Combining feats
                                feats = []
                                for i in range(num_chunk):
                                    melspec=data_chunks[i] # Mel-spectrogram feature 128x128
                                    genfeat=np.asarray(re.sub('[\[\]]','',gen_chunks[i]).split()) # Genre feat creadted from a pre-trained Net, 1x10
                                    genfeat=np.asfarray(genfeat,float)
                                    genfeat= np.tile(genfeat,(128,1)) # row duplicating into 128x10
                                    if m_data is not None: # Art feature 1x10
                                        m_data=np.asarray(m_data,(128,1)) # row duplicating into 128x10
                                        feat_t   = np.concatenate((melspec,genfeat,m_data),axis=1) # [melspec,genfeat,m_data] 128x148
                                    else:
                                        feat_t   = np.concatenate((melspec,genfeat),axis=1) # [melspec,genfeat] 128x138
                                    feats.append(feat_t)
                                feats = [(data, m_rank) for data in feats]
                                torch.save(feat,'data/' + key)
                        # Need to load feats of a file to record by key as filename
                        # Done for one file, and then add to records                        
                        records.append(feats) 
                        done_keys.append(key)
                        torch.save(records,'records_saved')
                        torch.save(done_keys,'done_keys_saved')
        records = [data for record in records for data in record]
        self.raw_data = pd.DataFrame.from_records(records, columns=['spectrogram', 'genre'])
        return

    

    def save(self):
        with open(RAW_DATAPATH, 'wb') as outfile:
            pickle.dump(self.raw_data, outfile, pickle.HIGHEST_PROTOCOL)
        print('-> Data() object is saved.\n')
        return

    def load(self):
        with open(RAW_DATAPATH, 'rb') as infile:
            self.raw_data   = pickle.load(infile)
        print("-> Data() object is loaded.")
        return

